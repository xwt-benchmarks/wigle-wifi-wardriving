apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.google.maps.android'

android {
    compileSdkVersion 29
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
    }

    resourcePrefix 'amu_'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }

        androidTest {
            java.srcDirs = ['tests/src']
        }
    }

    buildTypes {
        checkTypes {
            javaCompileOptions.annotationProcessorOptions.
                    classNames.add("org.checkerframework.checker.keystore.KeyStoreChecker")
            // Uncomment to do the strongboxbacked checking.
            // javaCompileOptions.annotationProcessorOptions.arguments.put("lint", "strongboxbacked")
            javaCompileOptions.annotationProcessorOptions.arguments.put("stubs", "hardwarebacked.astub")
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // This enables long timeouts required on slow environments, e.g. Travis
    adbOptions {
        timeOutInMs 10 * 60 * 1000  // 10 minutes
        installOptions "-d","-t"
    }

}

repositories {
    mavenLocal()
}

configurations {
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
    }
    errorproneJavac {
        description = 'required to run the Checker Framework.'
    }
}

dependencies {
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    ext.checkerFrameworkVersion = '3.1.1'
    annotationProcessor "org.checkerframework:keystore-checker:0.1-SNAPSHOT"
    implementation files("../../../../keystore-checker-qual-android/build/libs/keystore-checker-qual-android.jar")
    checkerFrameworkAnnotatedJDK files("../../../../jdk8.jar")
    compileOnly "org.checkerframework:checker-qual-android:${checkerFrameworkVersion}"
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).all { compile ->
        if (compile.name.contains("CheckTypes")) {
            compile.options.compilerArgs += [
                    "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
            ]
            options.fork = true
            options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"]
        }
    }
}

task instrumentTest(dependsOn: connectedCheck)

task apklib(type: Zip) {
    dependsOn 'check'
    appendix = extension = 'apklib'

    from 'AndroidManifest.xml'
    into('res') {
        from 'res'
    }
    into('src') {
        from 'src'
    }
}

artifacts {
    archives apklib
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

signing {
    sign configurations.archives
}

def modifyPom(pom) {
    pom.project {
        name 'Google Maps Android API utility library'
        description 'Handy extensions to the Google Maps Android API.'
        url 'https://github.com/googlemaps/android-maps-utils'

        scm {
            url 'scm:git@github.com:googlemaps/android-maps-utils.git'
            connection 'scm:git@github.com:googlemaps/android-maps-utils.git'
            developerConnection 'scm:git@github.com:googlemaps/android-maps-utils.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        organization {
            name 'Google Inc'
            url 'http://developers.google.com/maps'
        }

        developers {
            developer {
                id 'broady'
                name 'Chris Broadfoot'
                url 'http://google.com/+ChristopherBroadfoot'
            }
        }
    }
}
